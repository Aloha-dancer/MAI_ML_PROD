version: "3.9"
services:
#Server app service
  flask_server:
    build: 
      dockerfile: ./server/Dockerfile
    container_name: flask_server
    restart: on-failure
    volumes:
      - ./server:/server
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - spam
    command: python3 server_app.py
#DWH service
  postgres:
    image: postgres:14.8-alpine3.18
    container_name: postgresql
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: "spam_check_db"
      POSTGRES_USER: "student"
      POSTGRES_PASSWORD: "123"
      PGDATA: "/var/lib/postgresql/data/pgdata"
      POSTGRES_HOST_AUTH_METHOD: "trust"
    volumes:
      - spamcheck-data:/var/lib/postgresql/data
      - ./initier:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d spam_check_db -U student"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - spam
  #Email server
  ml_service:
    build:
      dockerfile: ./mlapp/Dockerfile
    container_name: ml_service
    restart: on-failure
    volumes:
      - ./mlapp:/mlapp
    ports:
      - "5001:5001"
    depends_on:
      - flask_server
    networks:
      - spam
    command: python3 server.py

  email_service:
    build:
      dockerfile: ./emailhandlerapp/Dockerfile
    container_name: email_service
    restart: on-failure
    volumes:
      - ./emailhandlerapp:/emailhandlerapp
    ports:
      - "3000:3000"
    networks:
      - spam
    command: python3 app.py

volumes:
  spamcheck-data:


networks:
  spam:
    driver: "bridge"
    external: false